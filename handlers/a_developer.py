from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

import db
import keyboards as kb
import CallbackData as CbData
import utils
from filters import IsDeveloper, ChatTypeFilter
from states import stBadWords, stAlerts
import utils

dev_route = Router()


@dev_route.message(IsDeveloper(), ChatTypeFilter(), F.text, Command(commands=['addmoder'], prefix="!/", ignore_case=True))
async def addModerCMD(msg: Message, state: FSMContext):
    await state.clear()
    command_args = msg.text.split()[1:]
    if len(command_args) == 0 and msg.reply_to_message is None:
        return await msg.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π\n<code>!addmoder @username</code>\n–∏–ª–∏\n<code>–û—Ç–ø—Ä–∞–≤—å !addmoder –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</code>')
    db_target: db.User = utils.getUser(msg.reply_to_message.from_user.id if msg.reply_to_message else command_args[0], msg.chat.id)

    if db_target is None or (msg.reply_to_message is not None and msg.reply_to_message.from_user.is_bot):
        return await msg.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')

    db_target.moderator ^= True
    db_target.save()
    await msg.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{db_target.username}](tg://user?id={db_target.username}) {'–Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –ø–æ—Å—Ç' if db_target.moderator else '—Å–Ω—è—Ç —Å –ø–æ—Å—Ç–∞'} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
    if db_target.moderator:
        await utils.log(msg.bot, f"‚úÖ [{msg.from_user.username}](tg://user?id={msg.from_user.username}) –Ω–∞–∑–Ω–∞—á–∏–ª [{db_target.username}](tg://user?id={db_target.username}) –Ω–∞ —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
    else:
        await utils.log(msg.bot, f"‚úÖ [{msg.from_user.username}](tg://user?id={msg.from_user.username}) —Å–Ω—è–ª [{db_target.username}](tg://user?id={db_target.username}) —Å –ø–æ—Å—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")


@dev_route.message(IsDeveloper(), ChatTypeFilter(), F.text, Command(commands=['delmoder'], prefix="!/", ignore_case=True))
async def delModerCMD(msg: Message, state: FSMContext):
    await state.clear()
    command_args = msg.text.split()[1:]
    if len(command_args) == 0 and msg.reply_to_message is None:
        return await msg.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π\n<code>!addmoder @username</code>\n–∏–ª–∏\n<code>–û—Ç–ø—Ä–∞–≤—å !delmoder –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</code>')

    db_target: db.User = utils.getUser(msg.reply_to_message.from_user.id if msg.reply_to_message else command_args[0], msg.chat.id)

    if db_target is None or (msg.reply_to_message is not None and msg.reply_to_message.from_user.is_bot):
        return await msg.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')

    if not db_target.moderator:
        return await msg.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º')

    db_target.moderator = False
    db_target.save()
    await msg.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è—Ç —Å –ø–æ—Å—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
    await utils.log(msg.bot, f"‚úÖ [{msg.from_user.username}](tg://user?id={msg.from_user.username}) —Å–Ω—è–ª [{db_target.username}](tg://user?id={db_target.username}) —Å –ø–æ—Å—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")


# ALERTS_NOT_READY
# @dev_route.message(IsDeveloper(), ChatTypeFilter('private'), F.text == 'üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è')
# async def alertBtn(msg: Message, state: FSMContext):
#     await state.clear()
#     await msg.reply('üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π', reply_markup=kb.alerts_menu())


# ALERTS_NOT_READY
# @dev_route.callback_query(IsDeveloper(), CbData.Alerts.filter(F.action == 'show'))
# async def badWordsBtn(query: CallbackQuery, callback_data: CbData.BadWords, bot: Bot, state: FSMContext):
#     await state.clear()
#     try:
#         await query.message.edit_text('üìã –°–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π', reply_markup=kb.alerts_list(callback_data.data))
#     except:
#         await query.answer('üò° –î–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç')


# ALERTS_NOT_READY
# @dev_route.callback_query(IsDeveloper(), CbData.Alerts.filter(F.action == 'add'))
# async def addBadWordsQuery(query: CallbackQuery, callback_data: CbData.BadWords, bot: Bot, state: FSMContext):
#     await state.clear()
#     await state.set_state(stAlerts.add)
#     await query.message.edit_text('‚ùì –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', reply_markup=kb.alerts_cancel())


# ALERTS_NOT_READY
# @dev_route.message(IsDeveloper(), F.text, ChatTypeFilter('private'), stAlerts.add)
# async def addBadWords(msg: Message, state: FSMContext, bot: Bot):
#     await state.update_data(message_id=msg.message_id, from_chat_id=msg.chat.id)


@dev_route.message(IsDeveloper(), ChatTypeFilter('private'), F.text == 'üò° –ü–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞')
async def badWordsBtn(msg: Message, state: FSMContext):
    await state.clear()
    await msg.reply('üò° –ü–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞', reply_markup=kb.bad_words_menu())


@dev_route.callback_query(IsDeveloper(), CbData.BadWords.filter(F.action == 'show'))
async def badWordsBtn(query: CallbackQuery, callback_data: CbData.BadWords, bot: Bot, state: FSMContext):
    await state.clear()
    try:
        await query.message.edit_text('üìã –°–ø–∏—Å–æ–∫ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤', reply_markup=kb.bad_words_list(callback_data.data))
    except:
        await query.answer('üò° –î–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç')


@dev_route.callback_query(IsDeveloper(), CbData.BadWords.filter(F.action == 'delete'))
async def badWordsBtn(query: CallbackQuery, callback_data: CbData.BadWords, bot: Bot, state: FSMContext):
    await state.clear()
    db_word: db.BadWords = db.BadWords.get_or_none(db.BadWords.word == callback_data.data)
    if db_word is not None:
        db_word.delete_instance()
        await query.answer(f"‚úÖ –°–ª–æ–≤–æ '{callback_data.data}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞")
        await utils.log(query.bot, f"‚úÖ [{query.from_user.username}](tg://user?id={query.from_user.username}) —É–¥–∞–ª–∏–ª–∏ —Å–ª–æ–≤–æ '{callback_data.data}' –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤")
    try:
        await query.message.edit_text('üìã –°–ø–∏—Å–æ–∫ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤', reply_markup=kb.bad_words_list(0))
    except:
        await query.answer('üò° –î–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç')


@dev_route.callback_query(IsDeveloper(), CbData.BadWords.filter(F.action == 'add'))
async def addBadWordsQuery(query: CallbackQuery, callback_data: CbData.BadWords, bot: Bot, state: FSMContext):
    await state.clear()
    await state.set_state(stBadWords.add)
    await query.message.edit_text('‚ùì –û—Ç–ø—Ä–∞–≤—å –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞, –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏', reply_markup=kb.bad_words_cancel())


@dev_route.callback_query(IsDeveloper(), CbData.BadWords.filter(F.action == 'nothing'))
async def addBadWordsQuery(query: CallbackQuery, callback_data: CbData.BadWords, bot: Bot, state: FSMContext):
    await query.answer('‚ùì –¢—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç?')


@dev_route.callback_query(IsDeveloper(), CbData.BadWords.filter(F.action == 'cancel'))
async def addBadWordsQuery(query: CallbackQuery, callback_data: CbData.BadWords, bot: Bot, state: FSMContext):
    await state.clear()
    await query.message.edit_text('üò° –ü–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞', reply_markup=kb.bad_words_menu())


@dev_route.message(IsDeveloper(), F.text, ChatTypeFilter('private'), stBadWords.add)
async def addBadWords(msg: Message, state: FSMContext, bot: Bot):
    bad_words = [x.strip().rstrip() for x in msg.text.split("\n")]
    c = 0
    for word in bad_words:
        db_word, created = db.BadWords.get_or_create(word=word)
        db_word.save()
        if created:
            await utils.log(msg.bot, f"‚úÖ [{msg.from_user.username}](tg://user?id={msg.from_user.username}) –¥–æ–±–∞–≤–∏–ª —Å–ª–æ–≤–æ '{word}' –≤ —Å–ø–∏—Å–æ–∫ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤")
            c += 1
    await state.clear()
    await msg.answer(f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {c} –Ω–æ–≤—ã—Ö –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤')
